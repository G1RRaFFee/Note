generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now()) @map("created_at")
  updateAt     DateTime      @updatedAt @map("updated_at")
  refreshToken RefreshToken?
  contacts     Contact[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model Contact {
  id            Int             @id @default(autoincrement())
  name          String
  note          Note?           @relation("ContactToNote", fields: [noteId], references: [id])
  noteId        Int?            @unique
  avatar        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  folders       Folder[]        @relation("ContactFolders")
  ContactFolder ContactFolder[]

  @@map("contacts")
}

model Folder {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  contacts      Contact[]       @relation("ContactFolders")
  ContactFolder ContactFolder[]

  @@map("folders")
}

model ContactFolder {
  contactId Int
  folderId  Int
  contact   Contact @relation(fields: [contactId], references: [id])
  folder    Folder  @relation(fields: [folderId], references: [id])

  @@id([contactId, folderId])
}

model Note {
  id      Int      @id @default(autoincrement())
  Contact Contact? @relation("ContactToNote")

  @@map("notes")
}
